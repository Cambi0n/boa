import pygame
from pygame.locals import *


class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""
    def __init__(self):
        self.name = "Generic Event"
        self.catlist = []

class UpdateViewEvent(Event):
    def __init__(self):
        self.name = "Update View Event"
        self.catlist = ["updateview"]

class QuitEvent(Event):
    def __init__(self):
        self.name = "Program Quit Event"
        self.catlist = ["all"]

class MapBuiltEvent(Event):
    def __init__(self, gameMap):
        self.name = "Map Finished Building Event"
        self.map = gameMap
        self.catlist = ["all"]

class GameStartedEvent(Event):
    def __init__(self, game):
        self.name = "Game Started Event"
        self.game = game
        self.catlist = ["all"]

class PassGameRefEvent(Event):
    def __init__(self, game):
        self.name = "PassGameRefEvent"
        self.game = game
        self.catlist = ["all"]

class UnitMoveRequest(Event):
#   def __init__(self, direction):
    def __init__(self, unit, pos, selected):
        self.name = "Unit Move Request"
#       self.direction = direction
        self.unit = unit
        self.pos = pos
        self.selected = selected
        self.catlist = ["all"]

class UnitPlaceEvent(Event):
    """this event occurs when a unit is *placed* in a sector,
    ie it doesn't move there from an adjacent sector."""
    def __init__(self, unit):
        self.name = "Unit Placement Event"
        self.unit = unit
        self.catlist = ["all"]

#class UnitMoved(Event):
#   def __init__(self, unit, pos):
#       self.name = "Unit Move Event"
#       self.unit = unit
#       self.pos = pos
#       self.catlist = ["all"]

#class UnitSelectRequest(Event):
#   def __init__(self):
#       self.name = "UnitSelectRequest"

class SpriteSelectedEvent(Event):
    def __init__(self, sprite, left_click):
        self.name = "SpriteSelectedEvent"
        self.sprite = sprite
        self.left_click = left_click
        #self.clickpos = clickpos
        self.catlist = ["all"]
        
class SpriteRightClickEvent(Event):
    def __init__(self, clicked_sprite, clickpos):
        self.name = "SpriteRightClickEvent"
        self.clicked_sprite = clicked_sprite
        self.clickpos = clickpos
#        self.selected_sprite = selected_sprite
        self.catlist = ["all"]

class UnitSelectedEvent(Event):
    def __init__(self, unitSprite):
        self.name = "UnitSelectedEvent"
        self.unitSprite = unitSprite
        #self.clickpos = clickpos
        self.catlist = ["all"]

class PursuedUnitSelectedEvent(Event):
    def __init__(self, unitSprite):
        self.name = "PursuedUnitSelectedEvent"
        self.unitSprite = unitSprite
        #self.clickpos = clickpos
        self.catlist = ["all"]

class ClearSelectionEvent(Event):
    def __init__(self, updatemap = True):
        self.name = "ClearSelectionEvent"
        self.updatemap = updatemap
        self.catlist = ["all"]

class ClearPursuedSelectionEvent(Event):
    def __init__(self, updatemap = True):
        self.name = "ClearPursuedSelectionEvent"
        self.updatemap = updatemap
        self.catlist = ["all"]

class SetTargetEvent(Event):
    def __init__(self, unit, target):
        self.name = "SetTargetEvent"
        self.targettingunit = unit
        self.targettedunit = target
        self.catlist = ["all"]

class RequestTargetEvent(Event):
    def __init__(self, unit, target):
        self.name = "RequestTargetEvent"
        self.targettingunit = unit
        self.targettedunit = target
        self.catlist = ["all"]

class PlaceUnitRequest(Event):
    def __init__(self, unit, pos, game):
        self.name = "PlaceUnitRequest"
        self.unit = unit
        self.pos = pos
        self.game = game
        self.catlist = ["all"]

class ScrollMapRequest(Event):
    def __init__(self, dir):
        self.name = "ScrollMapRequest"
        self.scrolldir = dir
        self.catlist = ["all"]

class CreateUnitEvent(Event):
    def __init__(self, unit):
        self.name = "CreateUnitEvent"
        self.unit = unit
        self.catlist = ["all"]

class UpdateMap(Event):     # the whole map with sprites, not the game map
    def __init__(self, doallviewedtiles = True, doRefresh = True):
        self.name = "UpdateMap"
        self.doallviewedtiles = doallviewedtiles
        self.doRefresh = doRefresh
        self.catlist = ["all"]

class MapMoveRequest(Event):
    def __init__(self, newtopleftreq):
        self.name = "MapMoveRequest"
        self.topleftreq = newtopleftreq
        self.catlist = ["all"]

class MouseoverEvent(Event):
    def __init__(self, mousepos):
        self.name = "MouseoverEvent"
        self.mousepos = mousepos
        self.catlist = ["all"]

#class UnitModePopupEvent(Event):
#    def __init__(self, uid, stealth):
#        self.name = "UnitModePopupEvent"
#        self.uid = uid
#        self.stealth = stealth
#        self.catlist = ["all"]

#class InitUnitView(Event):
#   def __init__(self):
#       self.name = "InitUnitView"
#       self.catlist = ["all"]

class InitScreenDoneEvent(Event):
    def __init__(self):
        self.name = "InitScreenDoneEvent"
        self.catlist = ["all"]

class SPChoicesDone(Event):
    def __init__(self):
        self.name = "SPChoicesDone"
        #self.newmc = newmc
#        self.startdata = startdata
        self.catlist = ["all"]

class MPChoicesDone_Host(Event):
    def __init__(self, rseed):
        self.name = "MP Choices Done Host"
        self.rseed = rseed
        self.catlist = ["all"]

class MPChoicesDone_Client(Event):
    def __init__(self, rseed):
        self.name = "MP Choices Done Client"
        self.rseed = rseed
#        self.citydata = citydata
        self.catlist = ["all"]

class MPChoicesDone_SendToClient(Event):
    def __init__(self, rseed):
        self.name = "MP Choices Done Send To Client"
        self.rseed = rseed
#        self.citydata = citydata
        self.catlist = ["all"]

class CreateUnitRequest(Event):
    #def __init__(self, type, pos):
    def __init__(self, type):
        self.name = "Create Unit Request"
        self.type = type
        #self.pos = pos
        self.catlist = ["all"]

#class WaitTillAllUnitsCreated(Event):
#   def __init__(self, slot, numplayers=0):
#       self.name = "WaitTillAllUnitsCreated"
#       self.numplayers = numplayers
#       self.slot = slot
#       self.catlist = ["all"]

class WaitForAllClients(Event):
    def __init__(self, profname, code = '', otherargs = ()):
        self.name = "WaitForAllClients"
        self.profname = profname
        self.code = code
        self.otherargs = otherargs
        self.catlist = ["all"]

#class SendDoneCreatingSignal(Event):
#   def __init__(self, slot):
#       self.name = "Send Done Creating Signal"
#       self.slot = slot
#       self.catlist = ["all"]

class SendDoneSignal(Event):
    def __init__(self, profname):
        self.name = "Send Done Signal"
        self.profname = profname
        self.catlist = ["all"]

class AllInitUnitsCreated(Event):
    def __init__(self):
        self.name = "AllInitUnitsCreated"
        self.catlist = ["all"]

class AllInitHumanUnitsCreated(Event):
    def __init__(self):
        self.name = "AllInitHumanUnitsCreated"
        self.catlist = ["all"]

class SetHostAndProfAndIpsdata(Event):
    def __init__(self, host, profname, ipsdata, ismulti, numclients = -1):
        self.name = "SetHostAndIpsdata"
        self.amihost = host
        self.profname = profname
        self.ipsdata = ipsdata
        self.ismulti = ismulti
        self.numclients = numclients
        self.catlist = ["all"]

class UmpuVisChange(Event):
    def __init__(self):
        self.name = "UmpuVisChange"
        #self.uid = unit.uid
        #self.stealth = unit.stealth
        #self.unit = unit
        self.catlist = ["all"]

class MoveOrder_Game(Event):
    def __init__(self, unit, pos):
        self.name = "MoveOrder_Game"
        self.unit = unit
        self.pos = pos
        self.catlist = ["all"]

class MoveOrder_View(Event):
    def __init__(self, unit, path):
        self.name = "MoveOrder_View"
        self.unit = unit
        self.path = path
        self.catlist = ["all"]

class ToggleShowAllUnitOrders(Event):
    def __init__(self):
        self.name = "ToggleShowAllUnitOrders"
        self.catlist = ["all"]

class ShowOrders(Event):
    def __init__(self):
        self.name = "ShowOrders"
        self.catlist = ["all"]

class OrderDeleteLastOrderEvent(Event):
    def __init__(self, unit):
        self.name = "OrderDeleteLastOrder"
        self.unit = unit
        self.catlist = ["all"]

class ShowDeleteLastOrderForOtherMobjEvent(Event):
    def __init__(self, obj_id):
        self.name = "ShowDeleteLastOrderForOtherMobjEvent"
        self.obj_id = obj_id
        self.catlist = ["all"]

class DeleteLastOrderForSelectedSprite(Event):
    def __init__(self, sprite):
        self.name = "DeleteLastOrderSprite"
        self.sprite = sprite
        self.catlist = ["all"]

class AllHumanOrdersSubmitted(Event):
    def __init__(self):
        self.name = "AllHumanOrdersSubmitted"
        self.catlist = ["all"]

class RoundResolved(Event):
    def __init__(self, mm, amhost=True):
        self.name = "RoundResolved"
        self.mm = mm
        self.amhost = amhost
        self.catlist = ["all"]

class HostCalcsDone(Event):
    def __init__(self, mm):
        self.name = "HostCalcsDone"
        self.mm = mm
        self.catlist = ["all"]

class ShowMovie(Event):
    def __init__(self, visevents):
        self.name = "ShowMovie"
        self.visevents = visevents
#        self.firstshowing = firstshowing
#        self.amhost = amhost
        self.catlist = ["all"]

class ShowMovieFrame(Event):
    def __init__(self):
        self.name = "ShowMovieFrame"
        self.catlist = ["all"]

SHOW_MOVIEFRAME = pygame.USEREVENT+7

class OrdersDone(Event):
    def __init__(self):
        self.name = "OrdersDone"
        self.catlist = ["all"]

class AllowOrders(Event):
    def __init__(self):
        self.name = "AllowOrders"
        self.catlist = ["all"]

class DisAllowOrders(Event):
    def __init__(self):
        self.name = "DisAllowOrders"
        self.catlist = ["all"]

class EnableDoneButton(Event):
    def __init__(self, do_enable):
        self.name = "EnableDoneButton"
        self.do_enable = do_enable
        self.catlist = ["all"]

class CreateCityRequest(Event):
    def __init__(self):
        self.name = "CreateCityRequest"
        self.catlist = ["all"]

class Citycreated(Event):
    def __init__(self, pos, cid):
        self.name = "CreateCity"
        self.pos = pos
        self.cid = cid
        self.catlist = ["all"]

class AssignCitiesReq(Event):
    def __init__(self):
        self.name = "AssignCitiesReq"
        self.catlist = ["all"]

class CitiesAssigned(Event):
    def __init__(self, ca):
        self.name = "AssignCitiesReq"
        self.ca = ca
        self.catlist = ["all"]

class Unitcreated(Event):
    def __init__(self, type, slot, pos=None, uid=None):
        self.name = "CreateCity"
        self.type = type
        self.slot = slot
        self.pos = pos
        self.uid = uid
        self.catlist = ["all"]

class MapZoomRequest(Event):
    def __init__(self, zoom, pos):
        self.name = "MapZoomRequest"
        self.zoom = zoom
        self.pos = pos
        self.catlist = ["all"]

class MapZoomEvent(Event):
    def __init__(self, pos):
        self.name = "MapZoomEvent"
        self.pos = pos
        self.catlist = ["all"]
        
class MapLeftClickEvent(Event):
    def __init__(self,pos,shiftkeypressed):
        self.name = "MapLeftClickEvent"
        self.pos = pos
        self.shiftkeypressed = shiftkeypressed
        self.catlist = ["all"]     
        
class MapRightClickEvent(Event):
    def __init__(self,pos,keymods,target_mode = False):
        self.name = "MapRightClickEvent"
        self.pos = pos
        self.keymods = keymods
        self.target_mode = target_mode
        self.catlist = ["all"]     
        
class MiniMapRightClickEvent(Event):
    def __init__(self,pos,pursuemode = False):
        self.name = "MiniMapRightClickEvent"
        self.pos = pos
        self.pursuemode = pursuemode
        self.catlist = ["all"]     

class SelectionWindowLeftClickEvent(Event):                   
    def __init__(self,pos,mods,pursuemode=False):
        self.name = "SelectionWindowLeftClickEvent"
        self.pos = pos
        self.mods = mods
        self.pursuemode = pursuemode
        self.catlist = ["all"]     
        
class SelectionWindowRightClickEvent(Event):                   
    def __init__(self,pos,mods,pursuemode=False):
        self.name = "SelectionWindowRightClickEvent"
        self.pos = pos
        self.mods = mods
        self.pursuemode = pursuemode
        self.catlist = ["all"]     
        
class ClearSelectionWindow(Event):                   
    def __init__(self):
        self.name = "ClearSelectionWindow"
        self.catlist = ["all"]     
        
class BuildUnitGroupEvent(Event):                   
    def __init__(self,obj1,obj2,clientinitiated = True):
        self.name = "BuildUnitGroupEvent"
        self.obj1 = obj1
        self.obj2 = obj2
        self.clientinitiated = clientinitiated 
        self.catlist = ["all"]     
        
class HandleGroupCreationVisuals(Event):                   
    def __init__(self,group,newgroup,obj1,obj1absorbed,obj2,obj2absorbed, handleSelections = True):
        self.name = "HandleGroupCreationVisuals"
        self.group = group
        self.newgroup = newgroup
        self.obj1 = obj1
        self.obj1absorbed = obj1absorbed
        self.obj2 = obj2
        self.obj2absorbed = obj2absorbed
        self.handleSelections = handleSelections 
        self.catlist = ["all"]     
        
class LeaveUnitGroupEvent(Event):                   
    def __init__(self,group,obj2, clientinitiated = True):
        self.name = "LeaveUnitGroupEvent"
        self.group = group
        self.obj2 = obj2
        self.clientinitiated = clientinitiated 
        self.catlist = ["all"]     
        
class HandleGroupLeavingVisuals(Event):                   
    def __init__(self,unitsUngrouped, group, groupemptied, clickedUnit, selectunit = True):
        self.name = "HandleGroupLeavingVisuals"
        self.unitsUngrouped = unitsUngrouped
        self.group = group
        self.groupemptied = groupemptied
        self.clickedUnit = clickedUnit
        self.selectunit = selectunit
        self.catlist = ["all"]     
        
class PreMovieSaveEvent(Event):                   
    def __init__(self):
        self.name = "PreMovieSaveEvent"
        self.catlist = ["all"]     

class PostMovieSaveEvent(Event):                   
    def __init__(self):
        self.name = "PostMovieSaveEvent"
        self.catlist = ["all"]    
        
class RestoreToPostMovieEvent(Event):                   
    def __init__(self):
        self.name = "RestoreToPostMovieEvent"
        self.catlist = ["all"]    
         
class refreshAllSprites(Event):                   
    def __init__(self,team):
        self.name = "refreshAllSprites"
        self.team = team
        self.catlist = ["all"]     
        
class PassUnitViewRef(Event):                   
    def __init__(self,uvref):
        self.name = "PassUnitViewRef"
        self.uvref = uvref
        self.catlist = ["all"]     
        
class PlaySound(Event):                   
    def __init__(self,soundobject):
        self.name = "PlaySound"
        self.soundobject = soundobject
        self.catlist = ["all"]     
        
class SetMovieFrame(Event):                   
    def __init__(self,newframe):
        self.name = "SetMovieFrame"
        self.newframe = newframe
        self.catlist = ["all"]     
        
class RunMovie(Event):                   
    def __init__(self,endatframe,framedelay,playsounds = True, updateMap = True):
        self.name = "RunMovie"
        self.endatframe = endatframe
        self.framedelay = framedelay
        self.playsounds = playsounds
        self.updateMap = updateMap
        self.catlist = ["all"]     
        
class PauseMovie(Event):                   
    def __init__(self):
        self.name = "PauseMovie"
        self.catlist = ["all"]     
        
class showSupplyPopUpEvent(Event):                   
    def __init__(self, city, routenum = None):
        self.name = "showSupplyPopUpEvent"
        self.city = city
        self.routenum = routenum
        self.catlist = ["all"]
    
class hideSupplyPopUpEvent(Event):                   
    def __init__(self):
        self.name = "hideSupplyPopUpEvent"
        self.catlist = ["all"]

class startNewSupplyRouteEvent(Event):
    def __init__(self, city):
        self.name = "startNewSupplyRouteEvent"
        self.city = city
#        self.routenum = routenum
        self.catlist = ["all"]

#class CreateNewSupplyRouteForCityEvent(Event):
#    def __init__(self, pos, city):
#        self.name = "CreateNewSupplyRouteForCityEvent"
#        self.pos = pos
#        self.city = city
#        self.catlist = ["all"]

class HighlightSupplyRouteEvent(Event):
    def __init__(self, routenum, city):
        self.name = "HighlightSupplyRouteEvent"
        self.routenum = routenum
        self.city = city
        self.catlist = ["all"]

class addSupplyRouteSection(Event):
    def __init__(self, pos, city, routenum):
        self.name = "addSupplyRouteSection"
        self.pos = pos
        self.city = city
        self.routenum = routenum
        self.catlist = ["all"]
    

class HostReceivedNewPlayer(Event):
    def __init__(self):
        self.name = "HostReceivedNewPlayer"
#        self.slot = slot
#        self.mpdata = mpdata
        self.catlist = ["all"]

class EvaluateStartChoice(Event):
    def __init__(self, widget, (categ, row), choice, ctrl):
        self.name = "EvaluateStartChoice"
        self.widget = widget
        self.catrow = (categ, row)
        self.choice = choice
        self.ctrl = ctrl
        self.catlist = ["all"]

class InitpartyScreenLayout(Event):
    def __init__(self, ipsdata):
        self.name = "InitpartyScreenLayout"
        self.ipsdata = ipsdata
        self.catlist = ["all"]

class clientClearMPStartupScreenEvent(Event):
    def __init__(self):
        self.name = "clientClearMPStartupScreenEvent"
        self.catlist = ["all"]
        
class SelectRectEvent(Event):
    def __init__(self, pos1, pos2):
        self.name = "SelectRectEvent"
        self.pos1 = pos1
        self.pos2 = pos2
        self.catlist = ["all"]
                
class GatherIntoGroup(Event):
    def __init__(self):
        self.name = "GatherIntoGroup"
        self.catlist = ["all"]
        
class CreateMovementGroup(Event):    
    def __init__(self, objlist, pos):
        self.name = "CreateMovementGroup"
        self.objlist = objlist
        self.pos = pos
        self.catlist = ["all"]
  
class LeaveMovementGroup(Event):    
    def __init__(self, objlist, when, pos):
        self.name = "LeaveMovementGroup"
        self.objlist = objlist
        self.whenleave = when   # when is either 'now' or 'afterorders'
        self.pos = pos
        self.catlist = ["all"]
  
class ShowMovementGroupWarning1(Event):    
    def __init__(self, mgroup, objlist, pos):
        self.name = "ShowMovementGroupWarning"
        self.mgroup = mgroup
        self.objlist = objlist
        self.pos = pos
        self.catlist = ["all"]
        
class HideMovementGroupWarning1(Event):    
    def __init__(self):
        self.name = "HideMovementGroupWarning"
        self.catlist = ["all"]
        
class setSelectionToGroupEvent(Event):
    def __init__(self, mgroup):
        self.name = "setSelectionToGroupEvent"
        self.mgroup = mgroup
        self.catlist = ["all"]
    
class EvalAddChar(Event):    
    def __init__(self, Adv, profname):
        self.name = "EvalAddChar"
        self.Adv = Adv
        self.profname = profname
        self.catlist = ["all"]
    
class EvalRemoveChar(Event):    
    def __init__(self, charname):
        self.name = "EvalRemoveChar"
        self.charname = charname
        self.catlist = ["all"]
        
class HostSendDataEvent(Event):    
    def __init__(self, datatype, data = None, profile = None):
        self.name = "HostSendDataEvent"
        self.datatype = datatype
        self.data = data
        self.profile = profile
        self.catlist = ["all"]
        
class dataReceivedEvent(Event):    
    def __init__(self, datatype, data):
        self.name = "dataReceivedEvent"
        self.datatype = datatype
        self.data = data
        self.catlist = ["all"]
    
class LoadGraphicsEvent(Event):    
    def __init__(self):
        self.name = "LoadGraphicsEvent"
        self.catlist = ["all"]

class PrepareTownEvent(Event):    
    def __init__(self, enc, path_to_enc):
        self.name = "PrepareTownEvent"
        self.enc = enc
        self.path_to_enc = path_to_enc
        self.catlist = ["all"]

class FillTownEvent(Event):    
    def __init__(self, data):
        self.name = "FillTownEvent"
        self.data = data
        self.catlist = ["all"]
 
class UpdateTownScreenEvent(Event):    
    def __init__(self):
        self.name = "UpdateTownScreenEvent"
        self.catlist = ["all"]
  
class UpdatePreTownScreenEvent(Event):    
    def __init__(self):
        self.name = "UpdatePreTownScreenEvent"
        self.catlist = ["all"]
  
class SetEncounterDataEvent(Event):    
    def __init__(self, encounterdata):
        self.name = "SetEncounterDataEvent"
        self.encounterdata = encounterdata
        self.catlist = ["all"]
    
class SwitchToEncounterModeEvent(Event):    
    def __init__(self):
        self.name = "SwitchToEncounterModeEvent"
        self.catlist = ["all"]

class BuildMapEvent(Event):    
    def __init__(self):
        self.name = "BuildMapEvent"
        self.catlist = ["all"]

class RefreshAllSpritesEvent(Event):    
    def __init__(self):
        self.name = "RefreshAllSpritesEvent"
        self.catlist = ["all"]
    
class SendCharOrderFromClientEvent(Event):    
    def __init__(self, id, neword):
        self.name = "SendCharOrderFromClientEvent"
        self.id = id
        self.neword = neword
        self.catlist = ["all"]

class AppendOrderEvent(Event):    
    def __init__(self, id, neword):
        self.name = "AppendOrderEvent"
        self.id = id
        self.neword = neword
        self.catlist = ["all"]

class SetNewOrdersAfterOrderDeletionEvent(Event):    
    def __init__(self, id, neword):
        self.name = "SetNewOrdersAfterOrderDeletionEvent"
        self.id = id
        self.neword = neword
        self.catlist = ["all"]
    
    
class FindAllowedMovesEvent(Event):    
    def __init__(self, object, type):
        self.name = "FindAllowedMovesEvent"
        self.object = object
        self.type = type
        self.catlist = ["all"]
    
class SetAllowedMovesVisualsEvent(Event):    
    def __init__(self, object):
        self.name = "SetAllowedMovesVisualsEvent"
        self.object = object
        self.catlist = ["all"]
    
class AssignImportedObjectIdsEvent(Event):    
    def __init__(self, unified_ids):
        self.name = "AssignImportedObjectIdsEvent"
        self.unified_ids = unified_ids
        self.catlist = ["all"]
    
class SetAllLightingEvent(Event):    
    def __init__(self, light_data):
        self.name = "SetAllLightingEvent"
        self.light_data = light_data
        self.catlist = ["all"]
        
class SetAllTilesWithinPartyViewEvent(Event):
    def __init__(self, viewable_tile_sets):
        self.name = "SetAllTilesWithinPartyViewEvent"
        self.viewable_tile_sets = viewable_tile_sets
        self.catlist = ["all"]
    
#class ChangeViewLevelsEvent(Event):    
#    def __init__(self, view_changes):
#        self.name = "ChangeViewLevelsEvent"
#        self.view_changes = view_changes
#        self.catlist = ["all"]
    
class ChangeObjectsActionModeEvent(Event):    
    def __init__(self, mobj, new_mode):
        self.name = "ChangeObjectsActionModeEvent"
        self.mobj = mobj
        self.new_mode = new_mode
        self.catlist = ["all"]
    
class MakeTilesKnownEvent(Event):    
    def __init__(self, newly_known_tiles):
        self.name = "MakeTilesKnownEvent"
        self.newly_known_tiles = newly_known_tiles
        self.catlist = ["all"]

class HidePrimaryFloatingMenuEvent(Event):
    def __init__(self):
        self.name = "HidePrimaryFloatingMenuEvent"
        self.catlist = ["all"]
    
class HideSecondaryFloatingMenuEvent(Event):
    def __init__(self):
        self.name = "HideSecondaryFloatingMenuEvent"
        self.catlist = ["all"]

class HideHoverPopupEvent(Event):
    def __init__(self):
        self.name = "HideHoverPopupEvent"
        self.catlist = ["all"]

class HideModalWindowEvent(Event):
    def __init__(self):
        self.name = "HideModalWindowEvent"
        self.catlist = ["all"]

class SwitchToModalControllerEvent(Event):
    def __init__(self, window_ref):
        self.name = "SwitchToModalControllerEvent"
        self.window_ref = window_ref
        self.catlist = ["all"]
    
class SwitchToMainMapControllerEvent(Event):
    def __init__(self):
        self.name = "SwitchToMainMapControllerEvent"
        self.catlist = ["all"]

class AddStandardMeleeAttackOrderEvent(Event):
    def __init__(self, sel_obj, attacked_obj):
        self.name = "AddStandardMeleeAttackOrderEvent"
        self.sel_obj = sel_obj
        self.attacked_obj = attacked_obj
        self.catlist = ["all"]
        
class DragInModalEvent(Event):
    def __init__(self, drag):
        self.name = "DragInModalEvent"
        self.drag = drag
        self.catlist = ["all"]

class InventoryScreenRightClickEvent(Event):
    def __init__(self, inv_cont, whole_vp_pos):
        self.name = "InventoryScreenRightClickEvent"
        self.inv_cont = inv_cont
        self.whole_vp_pos = whole_vp_pos
        self.catlist = ["all"]

class AddItemToGameObjectEvent(Event):
    def __init__(self, obj, item, loc, slot = None):
        self.name = "AddItemToGameObjectEvent"
        self.obj = obj
        self.item = item
        self.loc = loc
        self.slot = slot
        self.catlist = ["all"]

class RemoveItemFromGameObjectEvent(Event):
    def __init__(self, obj, item, loc, slot = None):
        self.name = "RemoveItemFromGameObjectEvent"
        self.obj = obj
        self.item = item
        self.loc = loc
        self.slot = slot
        self.catlist = ["all"]

class NewItemCreatedEvent(Event):
    def __init__(self, item):
        self.name = "NewItemCreatedEvent"
        self.item = item
        self.catlist = ["all"]
        
class OrderDropItemToGroundEvent(Event):
    def __init__(self, item, holder):
        self.name = "OrderDropItemToGroundEvent"
        self.item = item
        self.holder = holder
        self.catlist = ["all"]

class OrderPickupItemFromGroundEvent(Event):
    def __init__(self, item, holder):
        self.name = "OrderPickupItemFromGroundEvent"
        self.item = item
        self.holder = holder
        self.catlist = ["all"]

class HostAddedItemToObjectEvent(Event):
    def __init__(self, data):
        self.name = "HostAddedItemToObjectEvent"
        self.data = data
        self.catlist = ["all"]

class HostRemovedItemFromObjectEvent(Event):
    def __init__(self, data):
        self.name = "HostRemovedItemFromObjectEvent"
        self.data = data
        self.catlist = ["all"]

class SendDataFromClientToHostEvent(Event):
    def __init__(self, datatype, data, profile, send_to_all = False):
        self.name = "SendDataFromClientToHostEvent"
        self.datatype = datatype
        self.data = data
        self.profile = profile
        self.send_to_all = send_to_all
#        self.send_to_self = send_to_self
        self.catlist = ["all"]
    
class FreeMoveResultsEvent(Event):
    def __init__(self, orddat):
        self.name = "FreeMoveResultsEvent"
        self.orddat = orddat
        self.catlist = ["all"]
    
class ShowDefaultInfoPopupEvent(Event):
    def __init__(self, msg):
        self.name = "ShowDefaultInfoPopupEvent"
        self.msg = msg
        self.catlist = ["all"]
  
class AddCastOrderEvent(Event):
    def __init__(self, source, data):
        self.name = "AddCastOrderEvent"
        self.source = source
#        self.spell_name = spell_name
        self.data = data
        self.catlist = ["all"]
  
class ShowChooseTargetInterfaceEvent(Event):
    def __init__(self, msg, source, find_all_valid_targets_func, chosen_func, cancel_func, accept_func = None, area_effect_func = None):
        self.name = "ShowChooseTargetInterfaceEvent"
        self.msg = msg
        self.source = source
        self.find_all_valid_targets_func = find_all_valid_targets_func
        self.chosen_func = chosen_func
        self.cancel_func = cancel_func
        self.accept_func = accept_func
        self.area_effect_func = area_effect_func
        self.catlist = ["all"]

class SwitchToTargetingControllerEvent(Event):
    def __init__(self, window_ref, cancel_func):
        self.name = "SwitchToTargetingControllerEvent"
        self.window_ref = window_ref
        self.cancel_func = cancel_func
        self.catlist = ["all"]

class TargetChosenEvent(Event):
    def __init__(self, target):
        self.name = "TargetChosenEvent"
        self.target = target
        self.catlist = ["all"]

class ClearTargetInterfaceEvent(Event):
    def __init__(self):
        self.name = "ClearTargetInterfaceEvent"
        self.catlist = ["all"]

class SetVisEvent(Event):
    def __init__(self, data_dict):
        self.name = "SetVisEvent"
        self.data_dict = data_dict
        self.catlist = ["all"]

class TerrainRightClickEvent(Event):
    def __init__(self, mappos):
        self.name = "TerrainRightClickEvent"
        self.mappos = mappos
        self.catlist = ["all"]

class RaiseSpriteChoiceMenuEvent(Event):
    def __init__(self, choice_list, next_event, clickpos):
        self.name = "RaiseSpriteChoiceMenuEvent"
        self.choice_list = choice_list
        self.next_event = next_event
        self.clickpos = clickpos
#        self.selected_sprite = selected_sprite
        self.catlist = ["all"]

class ShowDefaultChoicePopup(Event):
    def __init__(self, data, choice_func):
        self.name = "ShowDefaultChoicePopup"
        self.data = data
        self.choice_func = choice_func
        self.catlist = ["all"]
        
class ShowTimedMessageEvent(Event):
    def __init__(self, msg, add_to_list):
        self.name = "ShowTimedMessageEvent"
        self.msg = msg
        self.add_to_list = add_to_list
        self.catlist = ["all"]

class SetSelectionToObject(Event):
    def __init__(self, obj):
        self.name = "SetSelectionToObject"
        self.obj = obj
        self.catlist = ["all"]

class SetTimeEvent(Event):
    def __init__(self, new_time):
        self.name = "SetTimeEvent"
        self.new_time = new_time
        self.catlist = ["all"]

#class UnblockFreeMoveResultsOnClientEvent(Event):
#    def __init__(self):
#        self.name = "UnblockFreeMoveResultsOnClientEvent"
#        self.catlist = ["all"]
        
            
#class RunAFrame(Event):                   
#    def __init__(self):
#        self.name = "RunAFrame"
#        self.catlist = ["all"]     
        
#class DeleteUnitEvent(Event):                   
#    def __init__(self,obj):
#        self.name = "DeleteUnitEvent"
#        self.obj = obj
#        self.catlist = ["all"]     
        

#class Distribute_cnf(Event):
#   def __init__(self, cnf):
    #   self.name = "Distribute cnf"
        #self.cnf = cnf
        #self.catlist = ["all"]

#class Distribute_hnf(Event):
    #def __init__(self, hnf):
        #self.name = "Distribute hnf"
        #self.hnf = hnf
        #self.catlist = ["all"]

